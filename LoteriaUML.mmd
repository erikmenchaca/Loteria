classDiagram
    %% ===== MODEL PACKAGE =====
    
    class LoteriaCard {
        -int cardNumber
        -String name
        -String spanishName
        -String riddle
        -CardCategory category
        +LoteriaCard(int, String, String, String, CardCategory)
        +int getCardNumber()
        +String getName()
        +String getSpanishName()
        +String getRiddle()
        +CardCategory getCategory()
        +String toString()
        +boolean equals(Object)
        +int hashCode()
    }
    
    class CardCategory {
        <<enumeration>>
        PEOPLE
        ANIMALS
        OBJECTS
        NATURE
        FOOD
        ACTIVITIES
        SYMBOLS
        MISC
    }
    
    class LoteriaCards {
        <<utility>>
        -List~LoteriaCard~ ALL_CARDS
        -Map~Integer, LoteriaCard~ CARD_MAP
        +LoteriaCard EL_GALLO
        +LoteriaCard EL_DIABLO
        +LoteriaCard LA_DAMA
        +LoteriaCard EL_CATRIN
        +LoteriaCard LA_SIRENA
        +LoteriaCard LA_CALAVERA
        +List~LoteriaCard~ getAllCards()
        +LoteriaCard getCardByNumber(int)
        +List~LoteriaCard~ getCardsByCategory(CardCategory)
    }
    
    class Deck {
        -List~LoteriaCard~ cards
        -List~LoteriaCard~ remainingCards
        -List~LoteriaCard~ calledCards
        +Deck()
        -void initializeDeck()
        +void shuffle()
        +LoteriaCard drawCard()
        +boolean hasMoreCards()
        +void reset()
        +LoteriaCard getCard(int)
        +List~LoteriaCard~ getAllCards()
        +int getRemainingCount()
    }
    
    class Caller {
        -Deck deck
        -List~String~ callingPhrases
        -Random random
        +Caller(Deck)
        +LoteriaCard callCard()
        +String announceCard(LoteriaCard)
        +String getCallingPhrase(LoteriaCard)
        +boolean hasMoreCards()
        -void initializePhrases()
    }
    
    class Position {
        -int row
        -int col
        +Position(int, int)
        +int getRow()
        +int getCol()
        +String toString()
        +boolean equals(Object)
        +int hashCode()
    }
    
    class PatternType {
        <<enumeration>>
        FULL_CARD
        FOUR_CORNERS
        HORIZONTAL_LINE
        VERTICAL_LINE
        DIAGONAL_LINE
        CROSS
        X_PATTERN
        BORDER
        CENTER_SQUARE
        CUSTOM
    }
    
    class WinningPattern {
        -String name
        -PatternType type
        -List~Position~ requiredPositions
        -int pointValue
        +WinningPattern(String, PatternType, List~Position~, int)
        +String getName()
        +PatternType getType()
        +List~Position~ getRequiredPositions()
        +int getPointValue()
        +boolean isValidForBoardSize(int)
        +String toString()
    }
    
    class StandardPatterns {
        <<utility>>
        +WinningPattern createFullCard(int)
        +WinningPattern createFourCorners(int)
        +WinningPattern createHorizontalLine(int, int)
        +WinningPattern createVerticalLine(int, int)
        +WinningPattern createDiagonalLine(int, boolean)
        +List~WinningPattern~ getAllStandardPatterns(int)
    }
    
    class PlayerBoard {
        -LoteriaCard[][] grid
        -boolean[][] markers
        -int size
        -Player owner
        +PlayerBoard(int, Player)
        +void generateBoard(Deck)
        +boolean markCard(LoteriaCard)
        +boolean unmarkCard(LoteriaCard)
        +boolean hasCard(LoteriaCard)
        +boolean isMarked(int, int)
        +LoteriaCard getCard(int, int)
        +boolean checkPattern(WinningPattern, List~LoteriaCard~)
        +int getMarkedCount()
        +int getSize()
        +Player getOwner()
    }
    
    class Player {
        -String name
        -List~PlayerBoard~ boards
        -int score
        -boolean isReady
        +Player(String)
        +String getName()
        +void addBoard(PlayerBoard)
        +List~PlayerBoard~ getBoards()
        +void markCard(LoteriaCard)
        +boolean hasWinningPattern(WinningPattern, List~LoteriaCard~)
        +int getScore()
        +void addScore(int)
        +void setReady(boolean)
        +boolean isReady()
        +boolean equals(Object)
        +int hashCode()
    }
    
    class GameState {
        <<enumeration>>
        WAITING_FOR_PLAYERS
        READY_TO_START
        IN_PROGRESS
        PAUSED
        FINISHED
        CANCELLED
    }
    
    class LoteriaGame {
        -Deck deck
        -List~Player~ players
        -Caller caller
        -GameState gameState
        -List~WinningPattern~ patterns
        -LoteriaCard currentCard
        -List~LoteriaCard~ calledCards
        -int maxPlayers
        -Player winner
        +LoteriaGame(int)
        +Deck getDeck()
        +void addPlayer(Player)
        +void startGame()
        +LoteriaCard callNextCard()
        +boolean validateWin(Player, WinningPattern)
        +boolean isGameOver()
        +Player getWinner()
        +LoteriaCard getCurrentCard()
        +List~LoteriaCard~ getCalledCards()
        +List~Player~ getPlayers()
        +GameState getGameState()
    }
    
    class GameResult {
        -Player winner
        -List~Player~ participants
        -WinningPattern winningPattern
        -int totalCardsPlayed
        -long gameDurationMs
        -LocalDateTime gameDate
        +GameResult(Player, List~Player~, WinningPattern, int, long)
        +Player getWinner()
        +List~Player~ getParticipants()
        +WinningPattern getWinningPattern()
        +int getTotalCardsPlayed()
        +long getGameDuration()
        +LocalDateTime getGameDate()
    }
    
    class GameStatistics {
        -int totalGames
        -Map~Player, Integer~ playerWins
        -Map~LoteriaCard, Integer~ cardFrequency
        -List~GameResult~ gameHistory
        +GameStatistics()
        +void recordGame(GameResult, List~LoteriaCard~)
        +int getPlayerWins(Player)
        +int getTotalGames()
        +LoteriaCard getMostCalledCard()
        +double getWinRate(Player)
        +String exportStatistics()
    }
    
    class LoteriaException {
        +LoteriaException(String)
        +LoteriaException(String, Throwable)
    }
    
    %% ===== VIEW PACKAGE =====
    
    class LoteriaCLI {
        -int MAX_PLAYERS
        -int BOARD_SIZE
        -LoteriaGame game
        -Scanner scanner
        -Map~String, WinningPattern~ standardPatterns
        +LoteriaCLI()
        +void main(String[])
        +void run()
        -void handleJoin(String[])
        -void handleStart()
        -void handleCall()
        -void handleBoard(String[])
        -void handleWin(String[])
        -void handleNew()
        -void displayHelp()
        -void displayBoard(PlayerBoard)
        -Map~String, WinningPattern~ initializePatterns()
    }
    
    class LoteriaGUI {
        -int MAX_PLAYERS
        -int BOARD_SIZE
        -LoteriaGame game
        -Player currentPlayer
        -int currentBoardIndex
        -VBox setupPanel
        -VBox gamePanel
        -ListView~String~ playerListView
        -ComboBox~Player~ playerSelectorComboBox
        -ComboBox~Integer~ boardSelectorComboBox
        -Button startGameButton
        -Button callCardButton
        -Button loteriaButton
        -ImageView callerCardImageView
        -Label callerCardNameLabel
        -GridPane playerBoardGrid
        -Label statusLabel
        +void start(Stage)
        -void handleAddPlayer(TextField)
        -void handleStartGame()
        -void handleCallCard()
        -void handleLoteriaButton()
        -void handleNewGame()
        -void handlePlayerSelection()
        -void handleBoardSelection()
        -void drawPlayerBoard()
        -void updateBoardHighlights()
        -Image loadImage(String)
        -Image createPlaceholderImage(String)
        +void main(String[])
    }
    
    %% ===== RELATIONSHIPS =====
    
    %% Core Model Relationships
    LoteriaCard --> CardCategory : uses
    LoteriaCards --> LoteriaCard : creates/manages
    LoteriaCards --> CardCategory : uses
    Deck --> LoteriaCard : contains
    Deck --> LoteriaCards : uses
    Caller --> Deck : uses
    Caller --> LoteriaCard : calls
    
    %% Pattern System
    WinningPattern --> PatternType : uses
    WinningPattern --> Position : contains
    StandardPatterns --> WinningPattern : creates
    StandardPatterns --> PatternType : uses
    StandardPatterns --> Position : uses
    
    %% Board and Player System
    PlayerBoard --> LoteriaCard : contains
    PlayerBoard --> Player : owned by
    PlayerBoard --> WinningPattern : validates
    PlayerBoard --> Position : uses
    PlayerBoard --> Deck : generates from
    Player --> PlayerBoard : owns
    Player --> LoteriaCard : marks
    Player --> WinningPattern : checks
    
    %% Game Management
    LoteriaGame --> GameState : uses
    LoteriaGame --> Player : manages
    LoteriaGame --> Deck : uses
    LoteriaGame --> Caller : uses
    LoteriaGame --> LoteriaCard : tracks
    LoteriaGame --> WinningPattern : validates
    LoteriaGame --> LoteriaException : throws
    
    %% Statistics and Results
    GameResult --> Player : records
    GameResult --> WinningPattern : records
    GameStatistics --> GameResult : stores
    GameStatistics --> Player : tracks
    GameStatistics --> LoteriaCard : counts
    
    %% View Layer
    LoteriaCLI --> LoteriaGame : controls
    LoteriaCLI --> Player : manages
    LoteriaCLI --> PlayerBoard : displays
    LoteriaCLI --> WinningPattern : uses
    LoteriaCLI --> LoteriaException : handles
    
    LoteriaGUI --> LoteriaGame : controls
    LoteriaGUI --> Player : manages
    LoteriaGUI --> PlayerBoard : displays
    LoteriaGUI --> LoteriaCard : displays
    LoteriaGUI --> WinningPattern : uses
    LoteriaGUI --> LoteriaException : handles
    
    %% Exception Hierarchy
    LoteriaException --> Exception : extends